// 1.Prisma 마이그레이션 생성:
// npx prisma migrate dev --name tet2
// 2.마이그레이션 적용 및 Prisma 클라이언트 생성
// npx prisma migrate deploy
// 3.Prisma 클라이언트 재생성:
// npx prisma generate
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     Int       @id @default(autoincrement()) @map("id")
  name                   String    @map("name")
  email                  String    @unique @map("email")
  password               String    @map("password")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  currentRefreshToken    String?   @map("current_refresh_token")
  currentRefreshTokenExp DateTime? @map("current_refresh_token_exp")
  bookings               Booking[]
  orders                 Order[]

  @@index([email])
  @@map("USERS")
}

model Room {
  id             Int                @id @default(autoincrement()) @map("id")
  name           String             @map("name")
  class          String             @map("class")
  description    String             @map("description")
  capacity       Int                @map("capacity")
  basePrice      Float              @map("base_price")
  size           Float              @map("size")
  imageUrls      String[]           @map("image_urls")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  bookings       Booking[]
  availabilities RoomAvailability[]

  @@index([class])
  @@map("ROOMS")
}

model Booking {
  id                    Int       @id @default(autoincrement()) @map("id")
  userId                Int       @map("user_id")
  user                  User      @relation(fields: [userId], references: [id])
  roomId                Int       @map("room_id")
  room                  Room      @relation(fields: [roomId], references: [id])
  checkInDate           DateTime  @map("check_in_date")
  checkOutDate          DateTime  @map("check_out_date")
  requestedLateCheckout Boolean   @default(false) @map("requested_late_checkout")
  requestedEarlyCheckin Boolean   @default(false) @map("requested_early_checkin")
  actualLateCheckout    Boolean   @default(false) @map("actual_late_checkout")
  actualEarlyCheckin    Boolean   @default(false) @map("actual_early_checkin")
  petCount              Int       @map("pet_count")
  basePrice             Float     @map("base_price")
  additionalFees        Float     @default(0) @map("additional_fees")
  totalPrice            Float     @map("total_price")
  status                String    @map("status")
  specialRequests       String?   @map("special_requests")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  payments              Payment[]

  @@index([userId])
  @@index([roomId])
  @@index([checkInDate, checkOutDate])
  @@index([status])
  @@map("BOOKINGS")
}

model RoomAvailability {
  id             Int      @id @default(autoincrement()) @map("id")
  roomId         Int      @map("room_id")
  room           Room     @relation(fields: [roomId], references: [id])
  date           DateTime @map("date")
  availableCount Int      @map("available_count")

  @@unique([roomId, date])
  @@index([roomId])
  @@index([date])
  @@map("ROOM_AVAILABILITIES")
}

model Product {
  id            Int         @id @default(autoincrement()) @map("id")
  name          String      @map("name")
  description   String      @map("description")
  price         Float       @map("price")
  category      String      @map("category")
  imageUrl      String[]    @map("image_urls")
  stockQuantity Int         @map("stock_quantity")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  orderItems    OrderItem[]

  @@index([category])
  @@index([price])
  @@map("PRODUCTS")
}

model Order {
  id          Int         @id @default(autoincrement()) @map("id")
  userId      Int         @map("user_id")
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  totalAmount Float       @map("total_amount")
  status      String      @map("status")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  payment     Payment?

  @@index([userId])
  @@index([status])
  @@map("ORDERS")
}

model OrderItem {
  id        Int     @id @default(autoincrement()) @map("id")
  orderId   Int     @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @map("quantity")
  price     Float   @map("price")

  @@index([orderId])
  @@index([productId])
  @@map("ORDER_ITEMS")
}

model Payment {
  id            Int      @id @default(autoincrement()) @map("id")
  amount        Float    @map("amount")
  status        String   @map("status")
  method        String   @map("method")
  type          String   @map("type")
  bookingId     Int?     @unique @map("booking_id")
  booking       Booking? @relation(fields: [bookingId], references: [id])
  orderId       Int?     @unique @map("order_id")
  order         Order?   @relation(fields: [orderId], references: [id])
  transactionId String?  @map("transaction_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@index([status])
  @@index([method])
  @@index([type])
  @@map("PAYMENTS")
}
