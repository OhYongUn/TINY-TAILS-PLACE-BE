
// 1.Prisma 마이그레이션 생성:
// npx prisma migrate dev --name add_room_availability
//2.마이그레이션 적용 및 Prisma 클라이언트 생성
// npx prisma migrate deploy
//3.Prisma 클라이언트 재생성:
// npx prisma generate


datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     Int       @id @default(autoincrement())
  name                   String // 사용자 이름
  email                  String    @unique // 사용자 이메일 (고유값)
  password               String // 암호화된 비밀번호
  createdAt              DateTime  @default(now()) @map("created_at") // 계정 생성 시간
  updatedAt              DateTime  @updatedAt @map("updated_at") // 계정 정보 최종 수정 시간
  currentRefreshToken    String? // 현재 리프레시 토큰 (선택적)
  currentRefreshTokenExp DateTime? // 현재 리프레시 토큰 만료 시간 (선택적)
  bookings               Booking[] // 사용자의 예약 목록
  orders                 Order[] // 사용자의 주문 목록

  @@map("USER")
}

model Room {
  id             Int                @id @default(autoincrement())
  name           String
  class          String // A, B, C 클래스
  description    String
  capacity       Int // 수용 가능한 반려동물 수
  basePrice      Float // 기본 1박 가격
  size           Float
  imageUrls      String[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  bookings       Booking[]
  availabilities RoomAvailability[]

  @@map("ROOM")
}

model Booking {
  id                     Int      @id @default(autoincrement())
  userId                 Int
  user                   User     @relation(fields: [userId], references: [id])
  roomId                 Int
  room                   Room     @relation(fields: [roomId], references: [id])
  checkInDate            DateTime
  checkOutDate           DateTime
  requestedLateCheckout  Boolean  @default(false)
  requestedEarlyCheckin  Boolean  @default(false)
  actualLateCheckout     Boolean  @default(false)
  actualEarlyCheckin     Boolean  @default(false)
  petCount               Int
  basePrice              Float
  additionalFees         Float    @default(0)
  totalPrice             Float
  status                 String
  specialRequests        String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  payments               Payment[]

  @@map("BOOKING")
  @@index([roomId, checkInDate, checkOutDate])
  @@index([status, createdAt])
  @@index([userId, status])
}

model RoomAvailability {
  id             Int      @id @default(autoincrement())
  roomId         Int
  room           Room     @relation(fields: [roomId], references: [id])
  date           DateTime // 날짜 (시간 정보 없이)
  availableCount Int

  @@unique([roomId, date])
  @@index([date])
  @@map("ROOM_AVAILABILITY")
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String
  description   String
  price         Float
  category      String // 예: 장난감, 사료, 악세서리
  imageUrl      String[]
  stockQuantity Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderItems    OrderItem[]

  @@map("PRODUCT")
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  totalAmount Float
  status      String // 예: 대기중, 완료, 취소
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  payment     Payment?

  @@map("ORDER")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float

  @@map("ORDER_ITEM")
}

model Payment {
  id            Int      @id @default(autoincrement())
  amount        Float
  status        String // 예: 대기중, 완료, 실패
  method        String // 예: 신용카드, 계좌이체, 페이팔
  type          String   // 'INITIAL' or 'ADDITIONAL'
  bookingId     Int?     @unique
  booking       Booking? @relation(fields: [bookingId], references: [id])
  orderId       Int?     @unique
  order         Order?   @relation(fields: [orderId], references: [id])
  transactionId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("PAYMENT")
  @@index([status, createdAt])
  @@index([bookingId, type])
}