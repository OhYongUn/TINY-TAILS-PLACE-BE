// 1. Prisma 마이그레이션 생성 및 적용, Prisma 클라이언트 생성:
// npx prisma migrate dev --name update_pet_hotel_schema
//
// 2. (선택적) 프로덕션 환경에서 마이그레이션 적용:
// npx prisma migrate deploy
//
// 3. (선택적) Prisma 클라이언트 재생성:
// npx prisma generate

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     Int       @id @default(autoincrement()) @map("id")
  name                   String    @map("name")
  email                  String    @unique @map("email")
  password               String    @map("password")
  createdAt              DateTime  @default(now()) @map("created_at")
  updatedAt              DateTime  @updatedAt @map("updated_at")
  currentRefreshToken    String?   @map("current_refresh_token")
  currentRefreshTokenExp DateTime? @map("current_refresh_token_exp")
  bookings               Booking[]
  orders                 Order[]

  @@index([email])
  @@map("USERS")
}

model Room {
  id          Int          @id @default(autoincrement()) @map("id")
  name        String       @map("name")
  class       String       @map("class")
  description String       @map("description")
  capacity    Int          @map("capacity")
  size        Float        @map("size")
  imageUrls   String[]     @map("image_urls")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  prices      RoomPrice[]
  roomDetails RoomDetail[]

  @@map("ROOMS")
}

model RoomDetail {
  id              Int                @id @default(autoincrement()) @map("id")
  roomId          Int                @map("room_id")
  room            Room               @relation(fields: [roomId], references: [id])
  roomNumber      String             @unique @map("room_number")
  currentCheckIn  DateTime?          @map("current_check_in")
  currentCheckOut DateTime?          @map("current_check_out")
  status          RoomStatus         @map("status")
  lastCleaned     DateTime?          @map("last_cleaned")
  nextCleaning    DateTime?          @map("next_cleaning")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  bookings        Booking[]
  cleaningLogs    CleaningLog[]
  maintenanceLogs MaintenanceLog[]
  availabilities  RoomAvailability[]

  @@index([roomId])
  @@index([status])
  @@map("ROOM_DETAILS")
}

model RoomAvailability {
  id             Int        @id @default(autoincrement()) @map("id")
  roomDetailId   Int        @map("room_detail_id")
  roomDetail     RoomDetail @relation(fields: [roomDetailId], references: [id])
  date           DateTime   @map("date")
  availableCount Int        @map("available_count")

  @@unique([roomDetailId, date])
  @@index([date])
  @@map("ROOM_AVAILABILITIES")
}

model RoomPrice {
  id        Int       @id @default(autoincrement()) @map("id")
  roomId    Int       @map("room_id")
  room      Room      @relation(fields: [roomId], references: [id])
  startDate DateTime  @map("start_date")
  endDate   DateTime  @map("end_date")
  price     Float     @map("price")
  type      PriceType @map("type")

  @@index([roomId])
  @@index([startDate, endDate])
  @@map("ROOM_PRICES")
}

model Booking {
  id                    Int           @id @default(autoincrement()) @map("id")
  bookingNum            String        @unique @default(uuid()) @map("booking_num")
  userId                Int           @map("user_id")
  user                  User          @relation(fields: [userId], references: [id])
  roomDetailId          Int           @map("room_detail_id")
  roomDetail            RoomDetail    @relation(fields: [roomDetailId], references: [id])
  checkInDate           DateTime      @map("check_in_date")
  checkOutDate          DateTime      @map("check_out_date")
  requestedLateCheckout Boolean       @default(false) @map("requested_late_checkout")
  requestedEarlyCheckin Boolean       @default(false) @map("requested_early_checkin")
  actualLateCheckout    Boolean       @default(false) @map("actual_late_checkout")
  actualEarlyCheckin    Boolean       @default(false) @map("actual_early_checkin")
  petCount              Int           @map("pet_count")
  basePrice             Float         @map("base_price")
  additionalFees        Float         @default(0) @map("additional_fees")
  totalPrice            Float         @map("total_price")
  status                BookingStatus @map("status")
  specialRequests       String?       @map("special_requests")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  payments              Payment[]

  @@index([userId])
  @@index([roomDetailId])
  @@index([checkInDate, checkOutDate])
  @@index([status])
  @@map("BOOKINGS")
}

model CleaningLog {
  id           Int        @id @default(autoincrement()) @map("id")
  roomDetailId Int        @map("room_detail_id")
  roomDetail   RoomDetail @relation(fields: [roomDetailId], references: [id])
  cleanedAt    DateTime   @map("cleaned_at")
  cleanedBy    String     @map("cleaned_by")
  notes        String?    @map("notes")

  @@index([roomDetailId])
  @@index([cleanedAt])
  @@map("CLEANING_LOGS")
}

model MaintenanceLog {
  id           Int        @id @default(autoincrement()) @map("id")
  roomDetailId Int        @map("room_detail_id")
  roomDetail   RoomDetail @relation(fields: [roomDetailId], references: [id])
  issue        String     @map("issue")
  reportedAt   DateTime   @map("reported_at")
  resolvedAt   DateTime?  @map("resolved_at")
  status       String     @map("status")
  notes        String?    @map("notes")

  @@index([roomDetailId])
  @@index([status])
  @@map("MAINTENANCE_LOGS")
}

model Product {
  id            Int         @id @default(autoincrement()) @map("id")
  name          String      @map("name")
  description   String      @map("description")
  price         Float       @map("price")
  category      String      @map("category")
  imageUrl      String[]    @map("image_urls")
  stockQuantity Int         @map("stock_quantity")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  orderItems    OrderItem[]

  @@index([category])
  @@index([price])
  @@map("PRODUCTS")
}

model Order {
  id          Int         @id @default(autoincrement()) @map("id")
  userId      Int         @map("user_id")
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  totalAmount Float       @map("total_amount")
  status      String      @map("status")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  payment     Payment?

  @@index([userId])
  @@index([status])
  @@map("ORDERS")
}

model OrderItem {
  id        Int     @id @default(autoincrement()) @map("id")
  orderId   Int     @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @map("quantity")
  price     Float   @map("price")

  @@index([orderId])
  @@index([productId])
  @@map("ORDER_ITEMS")
}

model Payment {
  id            Int      @id @default(autoincrement()) @map("id")
  amount        Float    @map("amount")
  status        String   @map("status")
  method        String   @map("method")
  type          String   @map("type")
  bookingId     Int?     @unique @map("booking_id")
  booking       Booking? @relation(fields: [bookingId], references: [id])
  orderId       Int?     @unique @map("order_id")
  order         Order?   @relation(fields: [orderId], references: [id])
  transactionId String?  @map("transaction_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@index([status])
  @@index([method])
  @@index([type])
  @@map("PAYMENTS")
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  CLEANING
}

enum PriceType {
  BASE
  SEASONAL
  WEEKEND
  HOLIDAY
  SPECIAL_EVENT
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PAYPAL
  CASH
}

enum PaymentType {
  INITIAL
  ADDITIONAL
  REFUND
}