// SHOW TIMEZON
// ALTER DATABASE postgres SET timezone TO 'Asia/Seoul';
// SET timezone TO 'Asia/Seoul';
// 1. Prisma 마이그레이션 생성 및 적용, Prisma 클라이언트 생성:
// npx prisma migrate dev --name admin_role_add
//
// 2. (선택적) 프로덕션 환경에서 마이그레이션 적용:
// npx prisma migrate deploy
//
// 3. (선택적) Prisma 클라이언트 재생성:
// npx prisma generate

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     Int       @id @default(autoincrement()) @map("id")
  name                   String    @map("name")
  email                  String    @unique @map("email")
  phone                  String    @default("") @map("phone")
  password               String    @map("password")
  createdAt              DateTime  @default(now()) @map("created_at") @db.Timestamp
  updatedAt              DateTime  @updatedAt @map("updated_at") @db.Timestamp
  currentRefreshToken    String?   @map("current_refresh_token")
  currentRefreshTokenExp DateTime? @map("current_refresh_token_exp") @db.Timestamp
  bookings               Booking[]
  orders                 Order[]

  @@index([email])
  @@map("USERS")
}

model Room {
  id          Int          @id @default(autoincrement()) @map("id")
  name        String       @map("name")
  class       String       @map("class")
  description String       @map("description")
  capacity    Int          @map("capacity")
  size        Float        @map("size")
  imageUrls   String[]     @map("image_urls")
  createdAt   DateTime     @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime     @updatedAt @map("updated_at") @db.Timestamp
  roomDetails RoomDetail[]
  prices      RoomPrice[]

  @@map("ROOMS")
}

model RoomDetail {
  id              Int                @id @default(autoincrement()) @map("id")
  roomId          Int                @map("room_id")
  roomNumber      String             @unique @map("room_number")
  currentCheckIn  DateTime?          @map("current_check_in") @db.Timestamp
  currentCheckOut DateTime?          @map("current_check_out") @db.Timestamp
  status          RoomStatus         @default(AVAILABLE)
  lastCleaned     DateTime?          @map("last_cleaned") @db.Timestamp
  nextCleaning    DateTime?          @map("next_cleaning") @db.Timestamp
  createdAt       DateTime           @default(now()) @map("created_at") @db.Timestamp
  updatedAt       DateTime           @updatedAt @map("updated_at") @db.Timestamp
  bookings        Booking[]
  cleaningLogs    CleaningLog[]
  maintenanceLogs MaintenanceLog[]
  availabilities  RoomAvailability[]
  room            Room               @relation(fields: [roomId], references: [id])

  @@index([roomId])
  @@index([status])
  @@map("ROOM_DETAILS")
}

model RoomAvailability {
  id             Int        @id @default(autoincrement()) @map("id")
  roomDetailId   Int        @map("room_detail_id")
  date           DateTime   @map("date") @db.Timestamp
  availableCount Int        @map("available_count")
  roomDetail     RoomDetail @relation(fields: [roomDetailId], references: [id])

  @@unique([roomDetailId, date])
  @@index([date])
  @@map("ROOM_AVAILABILITIES")
}

model RoomPrice {
  id        Int       @id @default(autoincrement()) @map("id")
  roomId    Int       @map("room_id")
  startDate DateTime  @map("start_date") @db.Timestamp
  endDate   DateTime  @map("end_date") @db.Timestamp
  price     Float     @map("price")
  type      PriceType @map("type")
  room      Room      @relation(fields: [roomId], references: [id])

  @@index([roomId])
  @@index([startDate, endDate])
  @@map("ROOM_PRICES")
}

model Booking {
  id               String                 @id @default(uuid()) @map("id")
  userId           Int                    @map("user_id")
  roomDetailId     Int                    @map("room_detail_id")
  checkInDate      DateTime               @map("check_in_date") @db.Timestamp
  checkOutDate     DateTime               @map("check_out_date") @db.Timestamp
  basePrice        Float                  @map("base_price")
  totalPrice       Float                  @map("total_price")
  status           BookingStatus          @map("status")
  cancellationDate DateTime?              @map("cancellation_date") @db.Timestamp
  cancellationFee  Float?                 @map("cancellation_fee")
  createdAt        DateTime               @default(now()) @map("created_at") @db.Timestamp
  updatedAt        DateTime               @updatedAt @map("updated_at") @db.Timestamp
  user             User                   @relation(fields: [userId], references: [id])
  roomDetail       RoomDetail             @relation(fields: [roomDetailId], references: [id])
  bookingDetails   BookingDetail?
  statusHistories  BookingStatusHistory[]
  payments         Payment[]
  additionalFees   Float                  @default(0) @map("additional_fees")
  refunds          Refund[]
  AdditionalFee    AdditionalFee[]

  @@index([userId])
  @@index([roomDetailId])
  @@index([checkInDate, checkOutDate])
  @@index([status])
  @@map("BOOKINGS")
}

model BookingDetail {
  id                    Int     @id @default(autoincrement())
  bookingId             String  @unique @map("booking_id")
  petCount              Int     @map("pet_count")
  request               String? @default("") @map("request")
  requestedLateCheckout Boolean @default(false) @map("requested_late_checkout")
  requestedEarlyCheckin Boolean @default(false) @map("requested_early_checkin")
  actualLateCheckout    Boolean @default(false) @map("actual_late_checkout")
  actualEarlyCheckin    Boolean @default(false) @map("actual_early_checkin")
  booking               Booking @relation(fields: [bookingId], references: [id])

  @@map("BOOKING_DETAILS")
}

model BookingStatusHistory {
  id        Int           @id @default(autoincrement())
  bookingId String        @map("bookin_id")
  status    BookingStatus
  reason    String?
  createdAt DateTime      @default(now()) @map("created_at") @db.Timestamp
  booking   Booking       @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
  @@map("BOOKING_STATUS_HISTORIES")
}

model CleaningLog {
  id           Int        @id @default(autoincrement()) @map("id")
  roomDetailId Int        @map("room_detail_id")
  cleanedAt    DateTime   @map("cleaned_at") @db.Timestamp
  cleanedBy    String     @map("cleaned_by")
  notes        String?    @map("notes")
  roomDetail   RoomDetail @relation(fields: [roomDetailId], references: [id])

  @@index([roomDetailId])
  @@index([cleanedAt])
  @@map("CLEANING_LOGS")
}

model MaintenanceLog {
  id           Int        @id @default(autoincrement()) @map("id")
  roomDetailId Int        @map("room_detail_id")
  issue        String     @map("issue")
  reportedAt   DateTime   @map("reported_at") @db.Timestamp
  resolvedAt   DateTime?  @map("resolved_at") @db.Timestamp
  status       String     @map("status")
  notes        String?    @map("notes")
  roomDetail   RoomDetail @relation(fields: [roomDetailId], references: [id])

  @@index([roomDetailId])
  @@index([status])
  @@map("MAINTENANCE_LOGS")
}

model Product {
  id            Int         @id @default(autoincrement()) @map("id")
  name          String      @map("name")
  description   String      @map("description")
  price         Float       @map("price")
  category      String      @map("category")
  imageUrl      String[]    @map("image_urls")
  stockQuantity Int         @map("stock_quantity")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp
  updatedAt     DateTime    @updatedAt @map("updated_at") @db.Timestamp
  orderItems    OrderItem[]

  @@index([category])
  @@index([price])
  @@map("PRODUCTS")
}

model Order {
  id          String      @id @default(uuid()) @map("id")
  userId      Int         @map("user_id")
  totalAmount Float       @map("total_amount")
  status      String      @map("status")
  createdAt   DateTime    @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime    @updatedAt @map("updated_at") @db.Timestamp
  user        User        @relation(fields: [userId], references: [id])
  orderItems  OrderItem[]
  payment     Payment?

  @@index([userId])
  @@index([status])
  @@map("ORDERS")
}

model OrderItem {
  id        Int     @id @default(autoincrement()) @map("id")
  orderId   String  @map("order_id")
  productId Int     @map("product_id")
  quantity  Int     @map("quantity")
  price     Float   @map("price")
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("ORDER_ITEMS")
}

model Payment {
  id            String        @id @default(uuid()) @map("id")
  amount        Float         @map("amount")
  status        PaymentStatus @map("status")
  method        PaymentMethod @map("method")
  type          PaymentType   @map("type")
  bookingId     String?       @map("booking_id")
  orderId       String?       @unique @map("order_id")
  transactionId String?       @map("transaction_id")
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamp
  updatedAt     DateTime      @updatedAt @map("updated_at") @db.Timestamp
  booking       Booking?      @relation(fields: [bookingId], references: [id])
  order         Order?        @relation(fields: [orderId], references: [id])

  @@index([status])
  @@index([method])
  @@index([type])
  @@index([bookingId])
  @@index([orderId])
  @@map("PAYMENTS")
}

model AdditionalFee {
  id          Int      @id @default(autoincrement())
  bookingId   String   @map("booking_id")
  feeType     FeeType  @map("fee_type")
  amount      Float
  description String?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamp
  booking     Booking  @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
  @@map("ADDITIONAL_FEES")
}

model CancellationPolicy {
  id                Int      @id @default(autoincrement())
  daysBeforeCheckin Int      @map("days_before_checkin")
  feePercentage     Float    @map("fee_percentage")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt         DateTime @updatedAt @map("updated_at") @db.Timestamp

  @@map("CANCELLATION_POLICIES")
}

model Refund {
  id        Int          @id @default(autoincrement())
  bookingId String       @map("booking_id")
  amount    Float        @map("amount")
  status    RefundStatus @map("status")
  reason    String       @map("reason")
  createdAt DateTime     @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime     @updatedAt @map("updated_at") @db.Timestamp
  booking   Booking      @relation(fields: [bookingId], references: [id])

  @@index([bookingId])
  @@map("REFUNDS")
}

model Admin {
  id                     String      @id @default(uuid()) @map("id")
  name                   String      @map("name")
  email                  String      @unique @map("email")
  phone                  String      @default("") @map("phone")
  password               String      @map("password")
  failedLoginAttempts    Int         @default(0) @map("failed_login_attempts")
  isActive               Boolean     @default(true) @map("is_active")
  createdAt              DateTime    @default(now()) @map("created_at") @db.Timestamp
  updatedAt              DateTime    @updatedAt @map("updated_at") @db.Timestamp
  lastLoginAt            DateTime?   @map("last_login_at") @db.Timestamp
  currentRefreshToken    String?     @map("current_refresh_token")
  currentRefreshTokenExp DateTime?   @map("current_refresh_token_exp") @db.Timestamp
  AdminRole              AdminRole[]

  @@index([email])
  @@map("ADMINS")
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  adminRoles      AdminRole[]
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamp
  updatedAt       DateTime         @updatedAt @map("updated_at") @db.Timestamp

  @@map("ROLES")
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String?
  resource        String // 예: 'reservation', 'customer', 'employee'
  action          String // 예: 'read', 'create', 'update', 'delete'
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now()) @map("created_at") @db.Timestamp
  updatedAt       DateTime         @updatedAt @map("updated_at") @db.Timestamp

  @@unique([resource, action])
  @@map("PERMISSIONS")
}

model AdminRole {
  id        Int      @id @default(autoincrement())
  adminId   String   @map("admin_id")
  roleId    Int      @map("role_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp
  admin     Admin    @relation(fields: [adminId], references: [id])
  role      Role     @relation(fields: [roleId], references: [id])

  @@unique([adminId, roleId])
  @@map("ADMIN_ROLES")
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int        @map("role_id")
  permissionId Int        @map("permission_id")
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamp
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamp

  @@unique([roleId, permissionId])
  @@map("ROLE_PERMISSIONS")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CASH
}

enum PaymentType {
  INITIAL
  ADDITIONAL
}

enum FeeType {
  LATE_CHECKOUT
  EARLY_CHECKIN
  MINIBAR
  ROOM_SERVICE
  OTHER
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  CLEANING
  MAINTENANCE
}

enum PriceType {
  BASE
  SEASONAL
  WEEKEND
  HOLIDAY
  SPECIAL_EVENT
}

enum RefundStatus {
  PENDING
  PROCESSED
  FAILED
}
